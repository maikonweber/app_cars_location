import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { HomeService, DashboardData } from './home.service';
import { CarService, Car } from '../cars/car.service';
import { UserService, User } from '../users/user.service';

@Component({
  selector: 'app-home',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css']
})
export class HomeComponent implements OnInit {
  dashboardData: DashboardData | null = null;
  featuredCars: Car[] = [];
  activeUsers: User[] = [];
  isLoading = true;
  errorMessage = '';

  constructor(
    private homeService: HomeService,
    private carService: CarService,
    private userService: UserService
  ) {}

  ngOnInit() {
    // Usau auth para checar a valida√ß√£o
    this.loadFeaturedCars();
    this.loadActiveUsers();
    this.loadDashboardData();
  }

  loadDashboardData() {
    console.log('Carregando dados do dashboard...');
    this.isLoading = true;
    this.errorMessage = '';

    this.homeService.getDashboardData().subscribe({
      next: (data) => {
        this.dashboardData = data;
        this.isLoading = false;
        console.log('‚úÖ Dashboard carregado:', data);
      },
      error: (error) => {
        this.isLoading = false;
        this.errorMessage = 'Erro ao carregar dados do dashboard';
        console.error('‚ùå Erro no dashboard:', error);
      }
    });
  }

  loadFeaturedCars() {
    console.log('‚≠ê Carregando carros em destaque...');
    this.homeService.getFeaturedCars().subscribe({
      next: (cars) => {
        this.featuredCars = cars;
        console.log('‚úÖ Carros em destaque carregados:', cars);
      },
      error: (error) => {
        console.error('‚ùå Erro ao carregar carros em destaque:', error);
      }
    });
  }

  loadActiveUsers() {
    console.log('üë• Carregando usu√°rios ativos...');
    this.homeService.getActiveUsers().subscribe({
      next: (users) => {
        this.activeUsers = users;
        console.log('‚úÖ Usu√°rios ativos carregados:', users);
      },
      error: (error) => {
        console.error('‚ùå Erro ao carregar usu√°rios ativos:', error);
      }
    });
  }

  // Bot√µes de a√ß√£o
  onRefreshData() {
    console.log('üîÑ Atualizando dados...');
    this.loadDashboardData();
  }

  onViewAllCars() {
    console.log('üöó Visualizando todos os carros...');
    this.loadFeaturedCars();
  }

  onViewAllUsers() {
    console.log('üë• Visualizando todos os usu√°rios...');
    this.loadActiveUsers();
  }

  onAddNewCar() {
    console.log('‚ûï Adicionando novo carro...');
    // Implementar modal ou navega√ß√£o para adicionar carro
  }

  onAddNewUser() {
    console.log('‚ûï Adicionando novo usu√°rio...');
    // Implementar modal ou navega√ß√£o para adicionar usu√°rio
  }

  onViewCarDetails(car: Car) {
    console.log('üîç Visualizando detalhes do carro:', car);
    // Implementar navega√ß√£o para detalhes do carro
  }

  onViewUserDetails(user: User) {
    console.log('üîç Visualizando detalhes do usu√°rio:', user);
    // Implementar navega√ß√£o para detalhes do usu√°rio
  }

  onEditCar(car: Car) {
    console.log('‚úèÔ∏è Editando carro:', car);
    // Implementar edi√ß√£o do carro
  }

  onEditUser(user: User) {
    console.log('‚úèÔ∏è Editando usu√°rio:', user);
    // Implementar edi√ß√£o do usu√°rio
  }

  onDeleteCar(car: Car) {
    console.log('üóëÔ∏è Deletando carro:', car);
    if (confirm(`Tem certeza que deseja deletar o carro ${car.marca} ${car.modelo}?`)) {
      this.carService.deleteCar(car.id!).subscribe({
        next: () => {
          console.log('‚úÖ Carro deletado com sucesso');
          this.loadDashboardData();
        },
        error: (error) => {
          console.error('‚ùå Erro ao deletar carro:', error);
        }
      });
    }
  }

  onDeleteUser(user: User) {
    console.log('üóëÔ∏è Deletando usu√°rio:', user);
    if (confirm(`Tem certeza que deseja deletar o usu√°rio ${user.nome}?`)) {
      this.userService.deleteUser(user.id!).subscribe({
        next: () => {
          console.log('‚úÖ Usu√°rio deletado com sucesso');
          this.loadDashboardData();
        },
        error: (error) => {
          console.error('‚ùå Erro ao deletar usu√°rio:', error);
        }
      });
    }
  }
}
